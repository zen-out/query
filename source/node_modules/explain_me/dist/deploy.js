const { see, hourglass } = require("code_clarity")
const { copyHTML } = require("./jsdoc.js")
    /**********************************************
     * Organization of Folders
     * ==================================
     * problem: we need to have a place for everything. 
     * what should be: we should be quite organized in our code
     * what actually is: it's hard, like, really hard, to keep our directories and things organized. 
     * hypothesis: have a better method of keeping things organized, follow the marie kondon methodology in cleaning folders, function, classes, files in your work, spark complete joy here. 
     * 
     * Feature: 
     * 
     * 
     ********************************************/
const ccc = require("clear_concise_creative")
const { addIndex } = require("./makeGlobal")

function webpack(obj) {
    let arr = Object.keys(obj)
    let newObj = {}
    for (let i = 0; i < arr.length; i++) {
        let replaceHyphen = arr[i].replaceAll("-", "_")
        newObj[replaceHyphen] = {
            commonjs: replaceHyphen,
            commonjs2: replaceHyphen,
            amd: replaceHyphen,
            root: replaceHyphen,
        }
    }
    return newObj;
}


function addDeployInfo() {
    let readFile = ccc.readJSON("../deploy/package.json")
    if (!readFile["homepage"]) {
        ccc.appendToJSON("../deploy/package.json", "homepage", `https://zen-out.github.io/packages.html`)
    }
    if (!readFile["author"]) {
        ccc.appendToJSON("../deploy/package.json", "author", `Lesley Cheung (www.github.com/zen-out)`)
    }
}

/**
 * @example
moveToDeploy({
    "automate_me": "^1.0.3",
    "clean-jsdoc-theme": "^3.3.3",
    "clear_concise_creative": "^1.0.17",
    "jsdoc": "^3.6.10",
    "jsdoc-to-markdown": "^7.1.1"
})
 * @author zen-out
 * @date 2022-03-10
 * @param {any} deployDependencies
 * @param {any}  zen_out
 * @param {any}  final = false
 * @returns {any}
 */
function moveToDeploy(deployDependencies, fullstack = false, moveFromHTML = undefined, moveToHTML = undefined) {
    ccc.deletePath("../deploy/dist")
    addDeployInfo()
    ccc.mergeJSONObject("../deploy/package.json", ["scripts"], {
        "play": "node playground.js",
        "push": "git add . && git commit -m 'updated' && git push",
        "deploy": "npm version patch && npm publish",
        "update": "ncu --upgrade"
    })
    setTimeout(() => {
        see.should("replace dependencies with pass in object" + deployDependencies)
        ccc.replaceJSON("../deploy/package.json", ["dependencies"], deployDependencies)
        see.should("remove dev dependencies")
        ccc.replaceJSON("../deploy/package.json", ["devDependencies"], {})
        see.should("copy everything from dist")
        let moveDist = addIndex(fullstack)
        let README = ccc.readFile("./README.md")
        see.should("copy read me file")
        ccc.writeFile("../deploy/README.md", README)
        let PLAYGROUND = ccc.readFile("./playground.js")
        see.should("copy playground.js")
        ccc.writeFile("../deploy/playground.js", PLAYGROUND)
        if (moveFromHTML !== undefined) {
            copyHTML(moveFromHTML, moveToHTML)
        }
        see.should("create deploy dependencies")
        let getWebpack = webpack(deployDependencies)
        console.log(getWebpack, "\n1. replace this in externals\n2. type in npm run build and \n3. then run this command again, adding last parameter\n")
    }, 500)
}
module.exports = { moveToDeploy, webpack }